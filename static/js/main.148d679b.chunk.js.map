{"version":3,"sources":["Number.js","Date.js","Name.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Number","props","numberFormat","Array","from","number","map","el","i","Date","date","Name","className","name","Form","htmlFor","onChange","handlers","handleNameChange","id","type","style","color","errors","nameError","onKeyUp","handleDateChange","placeholder","dateError","handleNumberChange","numberError","App","event","console","log","target","value","length","test","setState","concat","state","slice","toUpperCase","key","src","alt","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.148d679b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Number = (props)=>{\r\n    const numberFormat = Array.from(props.number).map((el,i)=>!((i+1)%4)? `${el} ` : el);\r\n    return(\r\n        <h1>{numberFormat}</h1>\r\n    );\r\n}\r\n\r\nexport default Number;","import React from 'react';\r\n\r\n\r\nconst Date = (props)=>{\r\n    return(\r\n        <h2>{props.date}</h2>\r\n    );\r\n}\r\n\r\nexport default Date;","import React from 'react';\r\n\r\n\r\nconst Name = (props)=>{\r\n    return(\r\n        <h2 className=\"mr-2\">{props.name}</h2>\r\n    );\r\n}\r\n\r\nexport default Name;","import React from 'react';\r\n\r\nconst Form = (props)=>{\r\n    return(\r\n        <div className=\"d-flex-column\">\r\n          <label htmlFor=\"name\">Name : </label>\r\n          <input onChange={props.handlers.handleNameChange} id=\"name\" type=\"text\" />\r\n          <div style={{color:\"red\"}}>{props.errors.nameError}</div>\r\n          <label htmlFor=\"date\">Date : </label>\r\n          <input onKeyUp={props.handlers.handleDateChange} id=\"date\" type=\"text\" placeholder=\"MM/YY\" />\r\n          <div style={{color:\"red\"}}>{props.errors.dateError}</div>\r\n          <label htmlFor=\"number\">Number : </label>\r\n          <input onChange={props.handlers.handleNumberChange} id=\"number\" type=\"text\" />\r\n          <div style={{color:\"red\"}}>{props.errors.numberError}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './App.css';\r\nimport Number from './Number';\r\nimport Date from './Date';\r\nimport Name from './Name';\r\nimport Form from './Form';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n  this.state = {number : \".........\" ,date : \"**/**\" , name : \"\"};\r\n  }\r\n\r\n  handleNumberChange = (event)=>{\r\n    console.log(event.target.value)\r\n    if(event.target.value.length<=16 && /^[0-9]*$/.test(event.target.value)){\r\n      this.setState({\r\n        number : Array.from(event.target.value).concat(Array.from(this.state.number).slice(event.target.value.length)),\r\n        numberError : \"\"\r\n      })\r\n    }else{\r\n      this.setState({numberError : \"Card number must has 16 numbers\"})\r\n    }\r\n  }\r\n  handleNameChange = (event)=>{\r\n    if(event.target.value.length<21){\r\n      this.setState({name : event.target.value.toUpperCase(),nameError : \"\"})\r\n    }else{\r\n      this.setState({nameError : \"Name must be less than 20 characters\"})\r\n    }\r\n  }\r\n  handleDateChange = (event)=>{\r\n    if((event.target.value.length <2  && /^[0-9]*$/.test(event.target.value))\r\n     || (event.target.value.length>2 && event.target.value.length<6 && /^[0-9]{2}\\/[0-9]*$/.test(event.target.value))){\r\n      this.setState({\r\n        date : Array.from(event.target.value).concat(Array.from(this.state.date).slice(event.target.value.length)),\r\n        dateError : \"\"\r\n      });\r\n    }else if(event.target.value.length===2){\r\n      if(event.key !== 'Backspace'){\r\n        console.log(event )\r\n        event.target.value+=\"/\";\r\n      }\r\n        \r\n      this.setState({\r\n        date : Array.from(event.target.value).concat(Array.from(this.state.date).slice(event.target.value.length)),\r\n        dateError : \"\"\r\n      });\r\n    }else if(event.target.value.length===5  && /^[0-9]{2}\\/[0-9]{2}$/.test(event.target.value) ){\r\n      this.setState({\r\n        date : Array.from(event.target.value).concat(Array.from(this.state.date).slice(event.target.value.length)),\r\n        dateError : \"\"\r\n      });\r\n    }else{\r\n      this.setState({dateError : \"Date must be this format MM/YY\"})\r\n    }\r\n  }\r\n\r\n  render(){\r\n      return (\r\n      <div className=\"App\">\r\n          \r\n        <div className=\"d-flex-column card\">\r\n           \r\n          <img src=\"card.jpg\" alt=\"card\"/>\r\n          <Number number={this.state.number}/>\r\n          <div className=\"d-flex\">\r\n            <Name name={this.state.name}/>\r\n            <Date date={this.state.date}/>\r\n          </div>\r\n        </div>\r\n        <Form handlers={{\r\n          handleDateChange : this.handleDateChange,\r\n          handleNameChange : this.handleNameChange,\r\n          handleNumberChange : this.handleNumberChange\r\n        }}\r\n        errors={{\r\n          dateError : this.dateError,\r\n          numberError : this.numberError,\r\n          nameError : this.nameError\r\n        }}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}